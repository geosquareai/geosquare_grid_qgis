# -*- coding: utf-8 -*-

"""
/***************************************************************************
 GeosquareGrid
                                 A QGIS plugin
 Geosquare Grid
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-04-17
        copyright            : (C) 2025 by PT Geo Innovasi Nussantara
        email                : admin@geosquare.ai
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'PT Geo Innovasi Nussantara'
__date__ = '2025-04-17'
__copyright__ = '(C) 2025 by PT Geo Innovasi Nussantara'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

grid_size = {
    '50 m': 50,
    '100 m': 100,
    '500 m': 500,
    '1 km': 1000,
    '5 km': 5000,
    '10 km': 10000,
}

from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterFeatureSink,
                       QgsProcessingParameterBoolean,
                       QgsProcessingParameterEnum,
                       QgsProcessingParameterRasterLayer,
                       QgsRasterLayer,
                       QgsProcessingUtils)
from .geosquare_grid import GeosquareGrid
from qgis.core import QgsField, QgsFields, QgsCoordinateReferenceSystem, QgsWkbTypes, QgsCoordinateTransform
from PyQt5.QtCore import QVariant
from qgis import processing
from qgis.core import QgsGeometry, QgsFeature, QgsVectorLayer
import os


class FromRasterAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.
    geosquare_grid = GeosquareGrid()
    OUTPUT = 'OUTPUT'
    INPUT = 'INPUT'
    BOUNDARY = 'BOUNDARY'
    CALCULATETYPE = 'CALCULATETYPE'
    GRIDSIZE = 'GRIDSIZE'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # We add the input vector features source. It can have any kind of
        # geometry.
        self.addParameter(
            QgsProcessingParameterRasterLayer(
                self.INPUT,
                self.tr('Input raster layer'),
                [QgsProcessing.TypeRaster]
            )
        )

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.BOUNDARY,
                self.tr('Boundary layer'),
                [QgsProcessing.TypeVectorPolygon]
            )
        )

        # We add a feature sink in which to store our processed features (this
        # usually takes the form of a newly created vector layer when the
        # algorithm is run in QGIS).
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT,
                self.tr('Output layer')
            )
        )

        # We add a boolean parameter to determine if we want to only
        # include features that are inside the polygon
        self.addParameter(
            QgsProcessingParameterEnum(
                self.CALCULATETYPE,
                self.tr('Calculate type'),
                options=['Sum', 'Mean', 'Median', 'St Dev', 'Min', 'Max'],
                defaultValue='Median',
                allowMultiple=False,
                optional=False
            )
        )

        # We add a grid size parameter
        # option select from 50 m, 100 m, 500 m, 1 km, 5 km, 10 km
        self.addParameter(
            QgsProcessingParameterEnum(
                self.GRIDSIZE,
                self.tr('Grid size'),
                options=list(grid_size.keys()),
                defaultValue='50 m',
                allowMultiple=False,
                optional=False
            )
        )

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
        fields = QgsFields()
        fields.append(QgsField('gid', QVariant.String))
        fields.append(QgsField('value', QVariant.Double))
        
        # Create a CRS using EPSG:4326 (WGS84)
        crs = QgsCoordinateReferenceSystem('EPSG:4326')
        
        source = self.parameterAsRasterLayer(parameters, self.INPUT, context)
        boundary = self.parameterAsSource(parameters, self.BOUNDARY, context)
        calculatetype = self.parameterAsEnum(parameters, self.CALCULATETYPE, context)
        size = grid_size[list(grid_size.keys())[self.parameterAsEnum(parameters, self.GRIDSIZE, context)]]
        (sink, dest_id) = self.parameterAsSink(parameters, self.OUTPUT,
            context, fields, QgsWkbTypes.Polygon, crs)
        
        # Check if the input layer has crs
        if source.crs() is None:
            feedback.pushInfo(self.tr('Input layer has no CRS.'))
            return {self.OUTPUT: dest_id}

        boundarygeometries = [feature.geometry() for feature in boundary.getFeatures()]
        boundarygeometry = QgsGeometry.unaryUnion(boundarygeometries).simplify(0.0004)

        # convert to WGS84 if not already
        if boundary.sourceCrs() != crs:
            feedback.pushInfo(self.tr('Input layer is not in WGS84. Converting to WGS84.'))
            transform = QgsCoordinateTransform(boundary.sourceCrs(), crs, context.project())
            boundarygeometry.transform(transform)

        #  convert raster source to WGS84 if not already
        if source.crs() != crs:
            feedback.pushInfo(self.tr('Input layer is not in WGS84. Converting to WGS84.'))
            reproject = processing.run(
                'gdal:warpreproject',
                {
                    'INPUT': source.source(),
                    'TARGET_CRS': crs,
                    'OUTPUT': 'TEMPORARY_OUTPUT'
                },
                context=context,
                feedback=feedback,
            )
            source = QgsRasterLayer(reproject['OUTPUT'], 'reprojected')


        parrentGID = self.geosquare_grid.polyfill(
            boundarygeometry,
            10000,
            feedback=feedback,
        )
        
        count_10km = len(parrentGID)
        total = 100 / count_10km if count_10km else 0
        current = 0

        # clip big raster to small raster by using the boundary from parentGID and save it to temporary file with filename gid10km
        for g10km in parrentGID:
            # Stop the algorithm if cancel button has been clicked
            if feedback.isCanceled():
                break
            # process each part
            self.processPart(
                g10km,
                source,
                calculatetype,
                size,
                context,
                feedback,
                sink
            )
            # Update the progress bar
            current += total
            feedback.setProgress(int(current))
        feedback.setProgress(100)
        feedback.pushInfo(self.tr('Processing completed.'))
        feedback.pushInfo(self.tr('Output layer created.'))

        return {self.OUTPUT: dest_id}
    
    def processPart(self, g10km, source, calculatetype, size, context, feedback, sink):
        geometry = self.geosquare_grid.gid_to_geometry(g10km)
        temp_vector = QgsVectorLayer("Polygon?crs=EPSG:4326", "temp", "memory")
        temp_provider = temp_vector.dataProvider()
        temp_feature = QgsFeature()
        temp_feature.setGeometry(geometry)
        temp_provider.addFeature(temp_feature)

        clipped_result = processing.run(
            'gdal:cliprasterbymasklayer',
            {
                'INPUT': source.source(),
                'MASK': temp_vector,
                'SOURCE_CRS': source.crs().authid(),
                'TARGET_CRS': 'EPSG:4326',
                'NODATA': None,
                'ALPHA_BAND': False,
                'CROP_TO_CUTLINE': True,
                'KEEP_RESOLUTION': True,
                'SET_RESOLUTION': False,
                'OUTPUT': 'TEMPORARY_OUTPUT'
            },
            context=context,
            is_child_algorithm=True
        )
        # process per part
        self.process_zonal_statistics(
            g10km,
            clipped_result['OUTPUT'],
            calculatetype,
            size,
            context,
            feedback,
            sink
        )

    def process_zonal_statistics(self, g10km, clipped_output, calculatetype, size, context, feedback, sink):
        child_grids = self.geosquare_grid.parrent_to_allchildren(
                g10km,
                size,
                as_feature=True,
            )
        calc_type = ['SUM', 'MEAN', 'MIN', 'MAX', 'MEDIAN'][calculatetype]
        temp_vector_part = QgsVectorLayer("Polygon?crs=EPSG:4326&field=gid:string(0,0)", "temp", "memory")
        temp_provider_part = temp_vector_part.dataProvider()
        for child in child_grids:
            temp_provider_part.addFeature(child)
        # Map calculation type to statistics number
        stat_value = calculatetype
        output = processing.run(
            "native:zonalstatisticsfb",
            {
                'INPUT': temp_vector_part,
                'INPUT_RASTER': clipped_output,
                'RASTER_BAND': 1,
                'COLUMN_PREFIX': '_',
                'STATISTICS': [stat_value + 1],
                'OUTPUT': 'TEMPORARY_OUTPUT'
            },
            context=context,
            is_child_algorithm=True
        )
        # Load the output using QgsProcessingUtils to handle temp files properly
        output_layer = QgsProcessingUtils.mapLayerFromString(output['OUTPUT'], context)
        for feature in output_layer.getFeatures():
            # Stop the algorithm if cancel button has been clicked
            if feedback.isCanceled():
                break
            # Add the new feature to the sink
            sink.addFeature(feature, QgsFeatureSink.FastInsert)


    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'geosquare grid - from raster'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'vector'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return FromRasterAlgorithm()
